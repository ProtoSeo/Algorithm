/*
문제
RGB거리에는 집이 N개 있다. 거리는 선분으로 나타낼 수 있고, 1번 집부터 N번 집이 순서대로 있다.
집은 빨강, 초록, 파랑 중 하나의 색으로 칠해야 한다. 각각의 집을 빨강, 초록, 파랑으로 칠하는 비용이 주어졌을 때, 
아래 규칙을 만족하면서 모든 집을 칠하는 비용의 최솟값을 구해보자.

1번 집의 색은 2번, N번 집의 색과 같지 않아야 한다.
N번 집의 색은 N-1번, 1번 집의 색과 같지 않아야 한다.
i(2 ≤ i ≤ N-1)번 집의 색은 i-1, i+1번 집의 색과 같지 않아야 한다.

입력
첫째 줄에 집의 수 N(2 ≤ N ≤ 1,000)이 주어진다. 둘째 줄부터 N개의 줄에는 각 집을 빨강, 초록, 파랑으로 칠하는 비용이 1번 집부터 한 줄에 하나씩 주어진다. 집을 칠하는 비용은 1,000보다 작거나 같은 자연수이다.

출력
첫째 줄에 모든 집을 칠하는 비용의 최솟값을 출력한다.
*/  
#include <iostream>
#include<algorithm>
#include<cmath>

using namespace std;
int a[1001][3]; //입력을 받기 위한 배열
int d[3][1001][3];  //저장하기 위한 배열
int main() {
    ios::sync_with_stdio(false);
    cin.tie(NULL);
    int n,i,j,res=210000000;
    cin >>n;
    for(i=1;i<=n;i++) cin >> a[i][0] >> a[i][1] >> a[i][2];
    //0~2까지 반복문을 돌리면서 i값으로 시작했을때의 최솟값을 구한다.
    for(i=0;i<3;i++){
        //i값으로만 시작하기를 원하므로 d에 i값으로 시작하는 값 제외하고 큰 값을 임의로 넣는다.
        for(j=0;j<3;j++){
            if(j==i) 
                d[i][1][j] =a[1][j];
            else
                d[i][1][j] = 100000000;
        }
        // 내려가면서 최소값을 구한다.
        for(j=2;j<=n;j++){
            d[i][j][0] = a[j][0] + min(d[i][j-1][1],d[i][j-1][2]);
            d[i][j][1] = a[j][1] + min(d[i][j-1][0],d[i][j-1][2]);
            d[i][j][2] = a[j][2] + min(d[i][j-1][0],d[i][j-1][1]);
        }
        for(j=0;j<3;j++){
            // i값으로 시작했으므로 j가 i일 경우에는 정답이 될수없다.
            if(j==i) continue;
            // i값과 다른 값인 경우에 최솟값을 저장하는 res변수와 값을 비교해서 정답을 구한다.
            if(res>d[i][n][j]) res = d[i][n][j];
        }
    }
    cout << res;
}