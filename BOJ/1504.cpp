/*
문제
방향성이 없는 그래프가 주어진다. 세준이는 1번 정점에서 N번 정점으로 최단 거리로 이동하려고 한다. 
또한 세준이는 두 가지 조건을 만족하면서 이동하는 특정한 최단 경로를 구하고 싶은데, 
그것은 바로 임의로 주어진 두 정점은 반드시 통과해야 한다는 것이다.

세준이는 한번 이동했던 정점은 물론, 한번 이동했던 간선도 다시 이동할 수 있다. 하지만 반드시 최단 경로로 이동해야 한다는 사실에 주의하라. 
1번 정점에서 N번 정점으로 이동할 때, 주어진 두 정점을 반드시 거치면서 최단 경로로 이동하는 프로그램을 작성하시오.

입력
첫째 줄에 정점의 개수 N과 간선의 개수 E가 주어진다. 
(2 ≤ N ≤ 800, 0 ≤ E ≤ 200,000) 둘째 줄부터 E개의 줄에 걸쳐서 세 개의 정수 a, b, c가 주어지는데, 
a번 정점에서 b번 정점까지 양방향 길이 존재하며, 그 거리가 c라는 뜻이다. 
(1 ≤ c ≤ 1,000) 다음 줄에는 반드시 거쳐야 하는 두 개의 서로 다른 정점 번호가 주어진다.

출력
첫째 줄에 두 개의 정점을 지나는 최단 경로의 길이를 출력한다. 그러한 경로가 없을 때에는 -1을 출력한다.
*/
#include<iostream>
#include<cmath>
#define INF 700000000
using namespace std;
int map[801][801];
int main(){
    ios::sync_with_stdio(false); 
    cin.tie(NULL);
    int n,e,i,j,k,so1,so2;
    cin >> n>>e;
    for(i=1;i<=n;i++){  //플로이드 와샬알고리즘을 사용하기 위해서 배열을 초기화 해준다.
        for(j=1;j<=n;j++){
            if(i==j)
                map[i][j]=0;
            else 
                map[i][j] = INF;
        }
    }
    for(i=1;i<=e;i++){  //입력을 받는데 min함수를 통해서 두 정점사이에 여러 경로가 있을경우 최소의 값을 가진 경로의 값만 저장하도록 한다.
        int a,b,c;
        cin >> a>>b>>c;
        if(a==b&&map[a][b]==0) {
            map[a][b]= c;
        }else{
            map[b][a]= map[a][b]= min(map[a][b],c);
        }
    }
    cin >>so1>>so2;     //두 경유지점 입력
    for(i=1;i<=n;i++){      //경유지
        for(j=1;j<=n;j++){  //시작지점
            for(k=1;k<=n;k++){  //종료지점
                if(map[j][k]>map[j][i]+map[i][k]){
                    map[j][k] = map[j][i]+map[i][k];
                }
            }
        }
    }
    if(map[1][so1]+map[so1][so2]+map[so2][n]>=INF){     //두 경유지점을 통해 거쳐서 온값중에 하나의 값이라도 연결이 되어있지 않으면 -1을 출력한다.
        cout <<-1;
    }else{  //두 경유지를 경유하는 방법은 두가지가 있으므로 min함수를 통해서 최솟값을 구해서 출력한다.
        cout<< min(map[1][so1]+map[so1][so2]+map[so2][n],map[1][so2]+map[so2][so1]+map[so1][n]);
    }
}