/*
문제
수열 S가 어떤 수 Sk를 기준으로 S1 < S2 < ... Sk-1 < Sk > Sk+1 > ... SN-1 > SN을 만족한다면, 그 수열을 바이토닉 수열이라고 한다.

예를 들어, {10, 20, 30, 25, 20}과 {10, 20, 30, 40}, {50, 40, 25, 10} 은 바이토닉 수열이지만,  
{1, 2, 3, 2, 1, 2, 3, 2, 1}과 {10, 20, 30, 40, 20, 30} 은 바이토닉 수열이 아니다.

수열 A가 주어졌을 때, 그 수열의 부분 수열 중 바이토닉 수열이면서 가장 긴 수열의 길이를 구하는 프로그램을 작성하시오.

입력
첫째 줄에 수열 A의 크기 N이 주어지고, 둘째 줄에는 수열 A를 이루고 있는 Ai가 주어진다. (1 ≤ N ≤ 1,000, 1 ≤ Ai ≤ 1,000)

출력
첫째 줄에 수열 A의 부분 수열 중에서 가장 긴 바이토닉 수열의 길이를 출력한다.
*/
#include<iostream>
using namespace std;
int a[1001],d[2][1001];

int main()
{
	ios::sync_with_stdio(false); cin.tie(NULL);
	int n,i,j,max=0;
	cin >> n;
	for (i = 1; i <= n; i++) cin >> a[i];   //입력
    d[0][1] = 1;
	for (i = 2; i <= n; i++) {  //해당 반복문은 앞에서부터 증가하는 부분수열을 구한다.
		d[0][i] = 1;
		for (j = 1; j <= i; j++) {  //앞에서부터 시작
            if(a[j]<a[i]&&d[0][i]<d[0][j]+1){   //a[j]<a[i]이면서(이 조건 때문에 수열 증가 가능) 해당a[i]를 수열에 추가해서 길이가 더 길어지는 경우
                d[0][i] = d[0][j]+1;
            }
        }
	}
    d[1][n]=1;
    for (i = n-1; i >= 1; i--) {    //해당 반복문은 뒤에서부터 감소하는 부분수열을 구한다.
        d[1][i] = 1;
		for (j = n; j >= i; j--) {  //뒤에서부터 시작
            if(a[j]<a[i]&&d[1][i]<d[1][j]+1){   //a[j]<a[i]이면서(이 조건 때문에 수열 증가 가능) 해당a[i]를 수열에 추가해서 길이가 더 길어지는 경우
                d[1][i] = d[1][j]+1;
            }
        }
	}
    for(i=1;i<=n;i++){
        if(max<d[0][i]+d[1][i]-1)   //그리고 한 점을 기준으로 바이토닉 수열이 되는지 확인
                                    //(-1을 해주는 이유는 두 수열이 자기 자신을 가지고 있으므로 중복을 제거해줘야 한다.)
            max=d[0][i]+d[1][i]-1;
    }
    cout << max;
}