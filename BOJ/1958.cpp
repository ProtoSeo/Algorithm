/*
문제
문자열과 놀기를 세상에서 제일 좋아하는 영식이는 오늘도 문자열 2개의 LCS(Longest Common Subsequence)를 구하고 있었다. 
어느 날 영식이는 조교들이 문자열 3개의 LCS를 구하는 것을 보았다. 영식이도 도전해 보았지만 실패하고 말았다.

이제 우리가 할 일은 다음과 같다. 영식이를 도와서 문자열 3개의 LCS를 구하는 프로그램을 작성하라.

입력
첫 줄에는 첫 번째 문자열이, 둘째 줄에는 두 번째 문자열이, 셋째 줄에는 세 번째 문자열이 주어진다. (각 문자열의 길이는 100보다 작거나 같다)

출력
첫 줄에 첫 번째 문자열과 두 번째 문자열과 세 번째 문자열의 LCS의 길이를 출력한다.
*/
#include<iostream>
#include<string>
using namespace std;
int d[101][101][101];   //문자열이 3개이므로 3차원 배열을 이용한다.
int main(){
    string a,b,c;
    cin >> a >> b>>c;

    for(int i=1;i<=a.length();i++) {   //문자열 a의 길이만큼 반복
        for(int j=1;j<=b.length();j++) {    //문자열 b의 길이만큼 반복
            for(int k=1;k<=c.length();k++){     //문자열 c의 길이만큼 반복
                //세 문자열이 모두 같아야 하므로 모두 같은경우 라면
                if(a[i-1]==b[j-1]&&b[j-1]==c[k-1]){
                    //3차원 배열에서 다들 이전의 수열의 길이에서 값을 1 증가시킨 값을 가진다.
                    d[i][j][k] = d[i-1][j-1][k-1] + 1;
                }
                else {  //아니라면 이전의 수열들에서 가장 큰 값을 가진다.
                    d[i][j][k] = max(max(d[i][j][k-1],d[i][j-1][k]),d[i-1][j][k]); 
                } 
            }
        } 
    }
    //마지막에는 최대값이 저장되어있을것이다.
    cout << d[a.length()][b.length()][c.length()];  
}