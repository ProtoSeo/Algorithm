/*
문제
n*n의 크기의 대나무 숲이 있다. 욕심쟁이 판다는 어떤 지역에서 대나무를 먹기 시작한다. 
그리고 그 곳의 대나무를 다 먹어 치우면 상, 하, 좌, 우 중 한 곳으로 이동을 한다. 그리고 또 그곳에서 대나무를 먹는다. 
그런데 단 조건이 있다. 이 판다는 매우 욕심이 많아서 대나무를 먹고 자리를 옮기면 그 옮긴 지역에 그 전 지역보다 대나무가 많이 있어야 한다. 
만약에 그런 지점이 없으면 이 판다는 불만을 가지고 단식 투쟁을 하다가 죽게 된다(-_-)

이 판다의 사육사는 이런 판다를 대나무 숲에 풀어 놓아야 하는데, 어떤 지점에 처음에 풀어 놓아야 하고, 
어떤 곳으로 이동을 시켜야 둘 다 소중한 생명이지만 판다가 최대한 오래 살 수 있는지 고민에 빠져 있다. 
우리의 임무는 이 사육사를 도와주는 것이다. n*n 크기의 대나무 숲이 주어져 있을 때, 
이 판다가 최대한 오래 살려면 어떤 경로를 통하여 움직여야 하는지 구하여라.

입력
첫째 줄에 대나무 숲의 크기 n(1 ≤ n ≤ 500)이 주어진다. 그리고 둘째 줄부터 n+1번째 줄까지 대나무 숲의 정보가 주어진다. 
대나무 숲의 정보는 공백을 사이로 두고 각 지역의 대나무의 양이 정수 값으로 주어진다. 대나무의 양은 1,000,000보다 작거나 같은 자연수이다.

출력
첫째 줄에는 판다가 최대한 살 수 있는 일수(K)를 출력한다.
*/
#include<iostream>
#include<algorithm>
using namespace std;
int n,a[501][501],d[501][501],dx[4]={1,0,-1,0},dy[4]={0,1,0,-1};
int dfs(int y,int x){
    if(d[y][x]!=0) return d[y][x];  //이미 값이 구해져 있다면 해당 값을 반환한다.(없으면 그냥 dfs와 다를바 없음)
    d[y][x]=1;
    for(int i=0;i<4;i++){
        int xx = x + dx[i];    
        int yy = y + dy[i];    
        if(xx<=n&&xx>=1&&yy<=n&&yy>=1){     //배열의 칸을 벗어난 경우를 검사한다.
            if(a[yy][xx]>a[y][x]){      //값이 현재의 값보다 큰경우만 이동 할 수 있다.
                //dfs를 해서 이동했을때의 경우 아니면 현재의 칸의 값중 max를 저장한다.
                d[y][x] = max(d[y][x],dfs(yy,xx)+1);
            }
        }
    }
    return d[y][x];
}

int main(){
    ios::sync_with_stdio(false); cin.tie(NULL);
    int i,j;
    cin >>n;
    for(i=1;i<=n;i++){  //입력
        for(j=1;j<=n;j++) cin >> a[i][j];
    }
    for(i=1;i<=n;i++) {
        for(j=1;j<=n;j++) {
            if(d[i][j]==0){ //아직 값이 저장되어있지 않은 칸은 dfs진행
                dfs(i,j);
            }
        }
    }
    int ans =1;
    for(i=1;i<=n;i++) { //최댓값 구하는 반복문
        for(j=1;j<=n;j++) {
            ans = max(d[i][j],ans);
        }
    }
    cout << ans;
}