/*
문제
n(1 ≤ n ≤ 100)개의 도시가 있다. 그리고 한 도시에서 출발하여 다른 도시에 도착하는 m(1 ≤ m ≤ 100,000)개의 버스가 있다. 
각 버스는 한 번 사용할 때 필요한 비용이 있다.

모든 도시의 쌍 (A, B)에 대해서 도시 A에서 B로 가는데 필요한 비용의 최솟값을 구하는 프로그램을 작성하시오.

입력
첫째 줄에 도시의 개수 n(1 ≤ n ≤ 100)이 주어지고 둘째 줄에는 버스의 개수 m(1 ≤ m ≤ 100,000)이 주어진다. 
그리고 셋째 줄부터 m+2줄까지 다음과 같은 버스의 정보가 주어진다. 먼저 처음에는 그 버스의 출발 도시의 번호가 주어진다. 
버스의 정보는 버스의 시작 도시 a, 도착 도시 b, 한 번 타는데 필요한 비용 c로 이루어져 있다. 시작 도시와 도착 도시가 같은 경우는 없다. 
비용은 100,000보다 작거나 같은 자연수이다.

시작 도시와 도착 도시를 연결하는 노선은 하나가 아닐 수 있다.

출력
n개의 줄을 출력해야 한다. i번째 줄에 출력하는 j번째 숫자는 도시 i에서 j로 가는데 필요한 최소 비용이다. 
만약, i에서 j로 갈 수 없는 경우에는 그 자리에 0을 출력한다.
*/
#include <iostream>
#include <vector>
#include <cmath>
#define INF 1000000000
using namespace std;

int main() {
    ios::sync_with_stdio(false);
    cin.tie(NULL);
    int n,m,i,j,k;
    int graph[101][101];
    int res[101][101];
    cin >> n>>m;
    for(i=1;i<n+1;i++){     // 입력받을 인접행렬 초기화
        for(j=1;j<n+1;j++) {
            if(i==j)
                graph[i][j] = 0;            
            else
                graph[i][j] = INF;
        }
    }
    for(i=0;i<m;i++){
        int s,e,w;
        cin >>s>>e>>w;
        graph[s][e] = min(graph[s][e],w);
    }
    for(i=1;i<n+1;i++){     // 입력받을 정답행렬에 현재 상태 초기화
        for(j=1;j<n+1;j++) {
            res[i][j] = graph[i][j];            
        }
    }
    for(i=1;i<n+1;i++){     // 첫번째는 경유지 
        for(j=1;j<n+1;j++) {    // 두번째는 시작지점 
            for(k=1;k<n+1;k++){     //세번째는 종료지점
                if(res[j][i]+res[i][k]<res[j][k]){  //j에서 출발해서 경유지 i를 거치는게 k까지 도착하는데 현재 값보다 최소인가?
                    res[j][k] = res[j][i]+res[i][k];    //최소라면 경유지를 들리는 것으로 업데이트하자.
                }
            }
        }
    }
    for(i=1;i<n+1;i++){     
        for(j=1;j<n+1;j++) {
            if(res[i][j] >= INF ) res[i][j] = 0;    //정답 배열에 INF가 있다면 연결이 되지 않은 것이므로 0으로 바꾼다.
            cout<< res[i][j] <<' ';
        }
        cout<<'\n';
    }
}